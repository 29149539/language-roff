.TH STANDARD REQUESTS
.SH FONT AND CHARACTER SIZE CONTROL
.
.ps ±N         \" Point size
.ss N          \" Space-character size
.cs F N M      \" Constant character size
.bd F N        \" Embolden font F by N-1 units
.bd s F N      \" Embolden special font when current font is F
.ft F          \" Change to font F
.fp N F L      \" Mount font F on physical position N ≥ 1
.
.SH PAGE CONTROL
.pl ±N         \" Page length
.bp ±N         \" Eject current page: next page number N
.pn ±N         \" Next page number N
.po ±N         \" Page offset
.ne N          \" Need N vertical space
.mk R          \" Mark current vertical place in register R
.rt ±N         \" Return (upward only) to marked vertical place
.
.SH TEXT FILLING, ADJUSTING, AND CENTRING
.br            \" Break
.fi            \" Fill output lines
.nf            \" No filling/adjustment of output lines
.ad C          \" Adjust output lines with mode C
.na            \" No output line adjusting
.ce N          \" Centre next N input text lines
.
.SH VERTICAL SPACING
.vs N          \" Vertical baseline spacing (V)
.ls N          \" Output N-1v's after each text output line
.sp N          \" Space vertical distance N in either direction
.sv N          \" Save vertical distance N
.os            \" Output saved vertical distance
.ns            \" Turn no-space mode on
.rs            \" Restore spacing; turn no-space mode off
.
.SH LINE LENGTH AND INDENTING
.ll ±N         \" Line length
.in ±N         \" Indent
.ti ±N         \" Temporary indent
.
.SH MACROS, STRINGS, DIVERSION, AND POSITION TRAPS
.de XX YY      \" Define or redefine macro XX; end at call of YY
.am XX YY      \" Append to a macro
.ds XX STR     \" Define a string XX containing STR
.as XX STR     \" Append STR to string XX
.rm XX         \" Remove request, macro, or string
.rn XX YY      \" Rename request, macro, or string XX to YY
.di XX         \" Divert output to macro XX
.da XX         \" Divert and append to XX
.wh N XX       \" Set location trap
.ch XX N       \" Change trap location
.dt N XX       \" Set a diversion trap
.it N XX       \" Set an input-line count trap
.em XX         \" End macro is XX
.
.SH NUMBER REGISTERS
.nr R ±N M     \" Define and set number register R; auto-increment with M
.af R C        \" Assign format C to register R
.rr R          \" Remove register R
.
.SH TABS, LEADERS, AND FIELDS
.ta NT…        \" Tab settings; left-adjusting, unless t=R (right), C (centred)
.tc C          \" Tab repetition character
.lc C          \" Leader repetition character
.fc A B        \" Set field delimiter A and pad character B
.
.SH INPUT AND OUTPUT CONVENTIONS AND CHARACTER TRANSLATIONS
.ec C          \" Set escape character
.eo            \" Turn off escape character mechanism
.lg N          \" Ligature mode on if N > 0
.ul 0          \" Underline N input lines
.cu N          \" Continuous underline in nroff; in troff, like ul
.uf F          \" Underline font set to F (to be switched to by ul)
.cc C          \" Set control character to C
.c2 C          \" Set no-break control character to C
.tr ABCD…      \" Translate A→B, C→D… on output
.
.SH HYPHENATION
.nh            \" No hyphenation
.hy N          \" Hyphenate; N = mode
.hc C          \" Hyphenation indicator character C
.hw W          \" Add words W to hyphenation dictionary
.
.SH THREE-PART TITLES
.tl 'L'C'R'    \" 3-part title; delimiter may be any character
.pc C          \" Page-number character
.lt ±N         \" Length of title
.
.SH OUTPUT LINE NUMBERING
.nm ±N M S I   \" Number mode on or off, set parameters
.nn N          \" Do not number next N lines
.
.SH CONDITIONAL ACCEPTANCE OF INPUT
.if  C …       \" If condition C true, accept … as input; multiline uses \{…\}
.if !C …       \" If condition C false, accept …
.if  N …       \" If expression N > 0, accept …
.if !N …       \" If expression N ≤ 0, accept …
.if  'A'B' …   \" If string A identical to B, accept …
.if !'A'B' …   \" If string A not identical to B, accept …
.ie C …        \" If portion of if/else pair; all above forms (like if)
.el …          \" Else portion of if/else pair
.
.SH ENVIRONMENT SWITCHING
.ev N          \" Environment switch (push down)
.
.SH INSERTIONS FROM THE STANDARD INPUT
.rd PROMPT     \" Read insertion
.ex            \" Exit
.
.SH INPUT/OUTPUT FILE SWITCHING
.so FILE       \" Switch source file (push down)
.nx FILE       \" Next file
.sy STR        \" Execute program STR. Output is not interpolated.
.pi STR        \" Pipe output to program STR
.cf FILE       \" Copy file contents to troff output
.
.SH MISCELLANEOUS
.mc C N        \" Set margin character C and separation N
.tm STR        \" Print STR to STDERR
.ab STR        \" Print STR to STDERR, exit program
.ig YY         \" Ignore input until call of YY
.lf N F        \" Set input line number to N and filename to F
.pm T          \" Print macro names, sizes; if T present, print only size total
.fl            \" Flush output buffer
.
.SH GROFF EXTENSIONS
.aln X Y       \" Alias X to number register Y
.als X Y       \" Alias X for request, string, macro or diversion Y
.am1 X Y       \" Same as .am, but with compatibility mode off
.ami X Y       \" Append to macro indirectly
.ami1 X Y      \" Same as .ami, but with compatibility mode off
.as1 X Y       \" Same as .as, but with compatibility mode off
.asciify X     \" "Unformat" diversion X
.backtrace     \" Print backtrace of input stack to STDERR
.blm X         \" Set blank-line macro to X
.box/.boxa X   \" Same as .di/.da requests, but partly-filled lines aren't diverted
.break         \" Break out of a `while` loop
.brp           \" Same as \p
.cflags N xyz… \" Set property N of a variadic list of characters
.char X STR    \" Define character or glyph
.chop X        \" Remove last element of X
.class X  x-z… \" Assign name X to a list of characters. Ranges can be passed like "a-z"
.close X       \" Close stream X
.composite X Y \" Map glyph X to Y if used in \[…] with multiple components
.continue      \" Finish current execution of a `while` loop
.color N       \" Set whether colours are enabled
.cp N          \" Set whether compatibility mode is enabled
.defcolor      \" Define colour. Usage: .defcolor [name] [scheme=rgb|cmy|cmyk|gray|grey] [components]
.de1 X Y       \" Same as .de, but without compatibility mode
.dei X Y       \" Define macro indirectly
.dei1 X Y      \" Same as .dei, but without compatibility mode
.device STR    \" Almost the same as \X - STR is read in copy-mode, and a leading " is stripped
.devicem X     \" Same as \Y escape
.do XX         \" Interpret .XX with compatibility mode disabled
.ds1 X Y       \" Same as .ds, but without compatibility mode
.ecs           \" Save current escape character
.ecr           \" Restore escape character saved with .ecs
.evc X         \" Copy contents of environment X to current environment
.fam X         \" Set current font-family to X
.fchar C STR   \" Define fallback character/glyph C to be STR
.fcolor X      \" Set fill colour to X
.fschar F C S  \" Define fallback character/glyph C for font F to be S
.fspecial F S… \" Mark fonts S… as special when current font is F
.ftr F G       \" Translate font F to G
.fzoom F Z     \" Set zoom factor Z for font F
.gcolor C      \" Set glyph colour to C
.hcode C CODE  \" Set character C's hyphenation code
.hla X         \" Set hyphenation language to X
.hlm N         \" Set maximum number of consecutive hyphenated lines to N
.hpf FILE      \" Read hyphenation patterns from FILE
.hpfa FILE     \" Same as .hpf, except patterns are appended to current language
.hpfcode …     \" Recode hyphenation patterns
.hym N         \" Set hyphenation margin to N
.hys N         \" Set hyphenation space to N
.itc N MACRO   \" Variant of .it with better handling for \c
.kern N        \" Set whether pairwise kerning is enabled
.length X STR  \" Compute length of STR and store it in number register X
.linetabs N    \" Set whether line-tabs mode is enabled
.lsm X         \" Set leading spaces macro to X
.mso FILE      \" Same as .so, but also search macro-file directories
.nop STR       \" Execute STR, similar to `.if 1`
.nroff         \" Make built-in condition `n` always be true and `t` be false
.open X FILE   \" Open FILE and attach stream to X
.opena X FILE  \" Like .open, but existing files are appended to instead of overwritten
.output STR    \" Send STR to intermediate output, similar to \!
.pev           \" Print environment states to STDERR
.pnr           \" Print names and values of all defined registers to STDERR
.psbb FILE     \" Get bounding-box of the PostScript image FILE
.pso CMD       \" Same as .so, but input is drawn from standard output of CMD
.ptr           \" Print names and positions of all traps to STDERR
.pvs +-n       \" Set post-vertical line-space to N
.rchar XYZ…    \" Remove glyph definitions XYZ…
.return        \" Terminate execution within current macro
.rfschar XYZ…  \" Remove font-specific definitions of glyphs
.rj N          \" Right-justify next N lines
.rnn X Y       \" Rename number register X to Y
.schar C STR   \" Like .char, but special fonts are searched first
.shc C         \" Set soft-hyphen character to C
.shift N       \" Same as POSIX function
.sizes …       \" Set font-sizes of current font
.special …     \" Mark a list of fonts as special
.spreadwarn N  \" Emit warnings if space between words exceeds threshold N
.sty N F       \" Associate style F with font position N
.substring     \" Change parts of a given string
.tkf           \" Enable track kerning for a font
.tm1           \" Same as .tm, but initial quotes are stripped
.tmc           \" Same as .tm1, but without a final newline
.trf FILE      \" Transparently output contents of FILE
.trin          \" Similar to .tr request
.trnt          \" Same as .tr, but translations don't apply to transparent throughput
.troff         \" Make `.if t` always return true. Opposite of .nroff
.unformat X    \" "Unformats" diversion object X
.vpt N         \" Set whether vertical position traps are enabled
.warn N        \" Adjust level of displayed warning
.warnscale N   \" Set scaling indicator used by .warn
.while C STR   \" Execute STR for as long as C tests true. Multiline \{ \} is accepted
.write X STR   \" Write STR to stream X
.writec X STR  \" Same as .write, but without the final newline
.writem X Y    \" Same as .write, but use contents of macro Y
