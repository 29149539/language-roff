name: "RUNOFF"
scopeName: "text.runoff"
fileTypes: [
	"rnb"
	"rnc"
	"rnd"
	"rne"
	"rnh"
	"rnl"
	"rnm"
	"rno"
	"rnp"
	"rns"
	"rnt"
	"rnx"
	"run"
]
patterns: [include: "#main"]


repository:
	
	# Common patterns
	main:
		patterns: [
			{include: "#comment"}
			{include: "#underline"}
			{include: "#commands"}
		]
	
	
	# Comment lines
	comment:
		name: "comment.line.runoff"
		begin: "^\\.[!*~]"
		end: "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.runoff"

	
	# Single underlined character
	underline:
		name: "markup.underline.link.runoff"
		match: "[^_]\x08(?=_)|(?<=_)\x08[^_]"


	# Parameters passed to control lines
	arguments:
		patterns: [{
			name: "constant.numeric.runoff"
			match: "[-+]?\\d+(?:\\.\\d+)?"
		},{
			# Double-quoted string
			name: "string.quoted.runoff"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.runoff"
			endCaptures:   0: name: "punctuation.definition.string.end.runoff"
		},{
			# Unquoted string
			name: "variable.parameter.runoff"
			match: "(?!\\.)[^\\s;]+"
			captures:
				0: name: "string.unquoted.runoff"
		}]


	# Control lines
	commands:
		name: "meta.control-line.runoff"
		begin: "^\x0C*(?=\\.)"
		end: "$|;(?!\\.)"
		endCaptures:
			0: name: "punctuation.terminator.statement.runoff"
		patterns: [{
			
			# Trailing comment
			name: "comment.line.runoff"
			begin: "!"
			end:   "$"
			beginCaptures:
				0: "punctuation.definition.comment.runoff"
		},{
			# .if/.endif: Control flow
			name: "meta.condition.runoff"
			begin: "(?:^|(?<=;))((\\.)(?:IF|ELSE|ENDIF))(?=$|\\s|;)"
			end: "$|(;)"
			beginCaptures:
				1: name: "keyword.control.runoff"
				2: name: "punctuation.definition.function.runoff"
			endCaptures:
				1: name: "punctuation.terminator.statement.runoff"
			patterns: [include: "#arguments"]
		},{
			
			# .var: Variable declaration
			name: "meta.function.runoff"
			match: "(?i)^\x0C*((\\.)VAR|VR|VARIABLE)(?:$|[ \t]+(\\S*))"
			captures:
				1: name: "storage.type.var.runoff"
				2: name: "punctuation.definition.function.runoff"
				3: name: "variable.name.runoff"
		},{
			
			# Generic command
			name: "meta.function.runoff"
			begin: "(?i)(?:^|(?<=;))((\\.)(?:END\\s+)?[^;\\s\\-+]+)"
			end:   "$|(;)(?=\\.)|(?=;[^.])"
			patterns: [include: "#arguments"]
			beginCaptures:
				1: name: "keyword.function.name.runoff"
				2: name: "punctuation.definition.function.runoff"
			endCaptures:
				1: name: "punctuation.terminator.statement.runoff"
		}]
