name: "Sandbox"
scopeName: "source.sandbox"
fileTypes: []
patterns: [{include: "#comments"}

	name: "meta.odd-even.roff"
	begin: "^([.'])[ \t]*(BI)\\b"
	end:   '(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
	beginCaptures:
		0: {name: "meta.function.man.macro.roff"}
		1: {name: "punctuation.definition.function.macro.roff"}
		2: {name: "entity.name.function.roff"}
	patterns: [
		{include: "#odd-quoted"}
		{include: "#odd"}
		{include: "#even-quoted"}
		{include: "#even"}
		{include: "#escape-odd-to-even"}
		{include: "#escape-even-to-odd"}
	]
]


repository:
	"odd-quoted":
		name: "odd"
		begin: '[ \t]+(")'
		end:   '(")[ \t]*|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
		beginCaptures: 1: name: "punctuation.definition.string.begin.roff"
		endCaptures:   1: name: "punctuation.definition.string.end.roff"
		patterns: [{
			match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
			captures: 1: patterns: [include: "#string-escapes"]
		}, include: "#string-escapes"]
	
	
	"even-quoted":
		name: "even"
		begin: '"'
		end:   '(")([^"\\s]+[ \t]*)?|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
		beginCaptures:
			0: name: "punctuation.definition.string.begin.roff"
		endCaptures:
			1: name: "punctuation.definition.string.end.roff"
			2: name: "odd"
		patterns: [{
			match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
			captures: 1: patterns: [include: "#string-escapes"]
		}, include: "#string-escapes"]
	
	
	odd:
		name: "odd"
		begin: '[ \t]+(?!")((?:[^\\s"\\\\]|\\\\(?!").)+)'
		end:   '[ \t]+|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
		beginCaptures: 1: patterns: [include: "#escapes"]
		patterns: [include: "#escapes"]


	even:
		name: "even"
		begin: '(?<=^|\\s|")(?!"|\\\\")((?:[^\\s"\\\\]|\\\\(?!").)+)'
		end:   '(?=[ \t])|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
		beginCaptures: 1: patterns: [include: "#escapes"]
		patterns: [include: "#escapes"]


	"escape-even-to-odd":
		begin: "\\\\$\\n?"
		end: "^[ \t]*"
		name: "constant.character.escape.newline.roff"
	
	"escape-odd-to-even":
		begin: "[ \t]+\\\\$\\n?"
		end: "^"
		name: "constant.character.escape.newline.roff"


	# Everything under this line should be supplied by the existing grammar
	escapes:
		patterns: [{
			match: '(\\\\n\\()(\\w{2})'
			name: "constant.character.escape"
			captures:
				1: name: "entity.name"
				2: name: "variable.parameter"
		},{
			match: "\\\\."
			name: "constant.character.escape"
		},{
			name: "constant.character.escape.newline"
			begin: "\\\\$\\n?"
			end: "^"
		}]

	"string-escapes":
		patterns: [
			{match: '""', name: "constant.character.escape.quote.double.roff"}
			{include: "#escapes"}
		]

	comments:
		begin: '\\\\"'
		end: "$"
		name: "comment.line"
