name: "Pic"
scopeName: "source.pic"
fileTypes: ["pic"]
firstLineMatch: "^#[!/].*\\bpic2plot\\b"
patterns: [
	{include: "#embedded"}
	{include: "#main"}
]


repository:
	
	# Any unexpected Roff lines caught inside Pic
	embedded:
		begin: "^(?=[.'][ \t]*\\w+)"
		end:   "(?<!\\\\)$|(\\\\\".*)$"
		patterns: [include: "text.roff"]
		endCaptures:
			1: patterns: [include: "text.roff"]
	
	
	# Top-level patterns
	main:
		patterns: [
			{include: "#comment"}
			{include: "#keywords"}
			{include: "#string"}
			{include: "#number"}
			{include: "#punctuation"}
			{include: "#shapes"}
			{include: "#attributes"}
			{include: "#globals"}
			{include: "#function-call"}
			{include: "#backref"}
			{include: "#label"}
			{include: "#variable"}
		]


	# Attributes
	attributes:
		name: "variable.other.property.$1.pic"
		match: """(?x)\\b
			(cw|dashed|diameter|diam|dotted|down|height|ht|invisible
			|invis|left|move|radius|rad|right|same|up|width|wid)\\b"""


	# Instance backreferences: "1st, last, 2nd last, 8th", etc
	backref:
		name: "variable.language.backreference.pic"
		match: "\\b(last|(?:\\d*1[1-3]th|\\d*0th|(?:(?!11st)\\d)*1st|\\d*2nd|(?:(?!13rd)\\d*)3rd|\\d*[4-9]th)(?:[ \t]+last)?)\\b"
		captures: 0: name: "entity.name.pic"


	# Comment lines
	comment:
		name: "comment.line.pic"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.pic"


	# Function call
	"function-call":
		contentName: "meta.function-call.pic"
		begin: "\\b(?!\\d)(\\w+)(\\()"
		end:   "\\)"
		patterns: [include: "#main"]
		beginCaptures:
			0: name: "support.function.pic"
			1: name: "entity.name.function.pic"
			2: name: "punctuation.definition.arguments.begin.pic"
		endCaptures:
			0: name: "punctuation.definition.arguments.end.pic"


	# Global variables
	globals:
		name: "support.variable.global.pic"
		match: "(?x)\\b
			(arcrad|arrowhead|arrowht|arrowwid|boxht|boxwid|circlerad|dashwid
			|ellipseht|ellipsewid|fillval|lineht|linewid|maxpsht|maxpswid
			|moveht|movewid|scale|textht|textwid)\\b"


	# Keywords
	keywords:
		name: "keyword.operator.$1.pic"
		match: "\\b(and|at|from|reset|then|to|with|of\\s+the\\s+way\\s+between)\\b"


	# Labelled position
	label:
		match: "([A-Z][^#\\s:]*)(:)"
		captures:
			1: name: "storage.type.label.pic"
			2: name: "punctuation.separator.key-value.pic"


	# Numeric literal
	number:
		name: "constant.numeric.pic"
		match: "\\d+(?:\\.\\d+)?|\\.\\d+"
	

	# Symbols, operators and brackets
	punctuation:
		patterns: [
			{match: ";",          name: "punctuation.terminator.statement.pic"}
			{match: ",",          name: "punctuation.separator.comma.pic"}
			{match: "=",          name: "keyword.operator.assignment.pic"}
			{match: "<-|<->|->",  name: "keyword.operator.arrow.pic"}
			{match: "[-/+*%^]",   name: "keyword.operator.arithmetic.pic"}
			{match: "<|>",        name: "punctuation.definition.bracket.angle.pic"}
			{
				# Balanced brackets
				begin: "\\("
				end:   "(?=\\))|^(?=\\.PE\\b)"
				patterns: [include: "#main"]
				beginCaptures:
					0: name: "punctuation.definition.bracket.round.pic"
			}
			{match: "\\)",        name: "punctuation.definition.bracket.round.pic"}
			{match: "\\.(?!\\d)", name: "punctuation.delimiter.period.full-stop.pic"}
		]


	# Primitives
	shapes:
		name: "keyword.function.pic"
		match: "\\b(box|line|arrow|circle|ellipse|arc|spline)\\b"
		captures: 0: name: "entity.function.name.pic"


	# "Double-quoted string"
	string:
		name: "string.quoted.double.pic"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.pic"
		endCaptures:   0: name: "punctuation.definition.string.end.pic"
		patterns: [include: "text.roff#escapes"]


	# User-defined/generic variable
	variable:
		name: "variable.other.pic"
		match: "(?!\\d)\\w+"
