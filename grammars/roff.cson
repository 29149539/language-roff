name: "Roff"
scopeName: "text.roff"
firstLineMatch: "^\\.TH[ \t]+(?:\\S+)"
fileTypes: [
	"1", "1b", "1c", "1has", "1in", "1m", "1s", "1x",
	"2",
	"3", "3avl", "3bsm", "3c", "3in", "3m", "3qt", "3x",
	"4",
	"5",
	"6",
	"7", "7d", "7fs", "7i", "7ipp", "7m", "7p",
	"8",
	"9", "9e", "9f", "9p", "9s",
	"chem",
	"eqn",
	"groff",
	"man",
	"mandoc",
	"mdoc",
	"me",
	"ms",
	"mom",
	"n",
	"rnh",
	"rno",
	"roff",
	"run",
	"t",
	"tr"
]

patterns: [{ include: "#main" }]


repository:
	
	# Common patterns
	main:
		patterns: [
			{include: "#escapes"}
			{include: "#requests"}
			{include: "#macros"}
		]
	
	
	# Control line parameters
	params:
		name: "function-call.arguments.roff"
		begin: "\\G|^"
		end:   "\\Z|$"
		patterns: [
			{include: "#escapes"}
			{include: "#string"}
		]
	
	
	# "Double-quoted string"
	string:
		patterns: [{
			name: "string.quoted.double.empty.roff",
			match: '(")(")'
		},{
			name: "string.quoted.double.roff",
			begin: '"(?!")'
			end:   '(?<!")"(?!")|(?<!\\\\)$'
			beginCaptures: {0: {name: "punctuation.definition.string.begin.roff"}}
			endCaptures:   {0: {name: "punctuation.definition.string.end.roff"}}
			patterns: [
				{match: '""', name: "constant.character.escape.quote.double.roff"},
				{include: "#escapes"}
			]
		}]
	
	
	
	
	# Requests
	requests:
		patterns:[{
			
			# Generic requests without formatting
			name: "meta.function.request.$2.roff"
			begin: "(?x) ^([.'])[ \t]*
				(ab|ad|af|bd|bp|br|c2|cc|ce|cf|ch|cs|cu|da|di|dt|ec|em|eo
				|ev|ex|fc|fi|fl|fp|ft|hc|hw|hy|ig|in|it|lc|lg|lf|ll|ls|lt
				|mc|mk|na|ne|nf|nh|nm|nn|ns|nx|os|pc|pi|pl|pm|pn|po|ps|rd
				|rm|rn|rr|rs|rt|so|sp|ss|sv|sy|ta|tc|ti|tl|tm|tr|uf|vs|wh)"
			end: "(?<!\\\\)(?=\n)"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "entity.name.roff"}
			patterns: [{include: "#params"}]
			
		},{
			
			# Flow control/conditional requests
			name: "meta.function.request.$2.roff"
			begin: "^([.'])[ \t]*(ie|if|el)"
			end: "(?<!\\\\)(?=\n)"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "keyword.control.roff"}
			patterns: [{include: "#params"}]
			
		},{
			
			# Macro definition: No terminator specified
			name: "meta.function.definition.request.$2.roff"
			begin: "^([.'])[ \t]*((de)|(am))\\s*(\\S+?)?\\s*(\\\\\".*)?$"
			end:   "^(?:[ \t]*\\x5C{2})?\\.[ \t]*\\."
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				3: {name: "storage.type.function.roff"}
				4: {name: "entity.name.function.roff"}
				5: {name: "variable.parameter.roff"}
				6: {patterns: [{include: "#escapes"}]}
				7: {patterns: [{include: "#params"}]}
			endCaptures:
				0: {name: "punctuation.definition.request.roff"}
			patterns: [{include: "$self"}]
		},{
			
			# Macro definition: Terminator included
			name: "meta.function.definition.request.with-terminator.$2.roff"
			begin: "^([.'])[ \t]*((de)|(am))\\s*(\\S+)\\s*(\"[^\"]+\"?|\\S+?(?=\\s|\\\\\"))?(.*)$"
			end:   "^(\\.)[ \t]*((\\6)(?=$|\\s|\\\\(?:$|\")))"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				3: {name: "storage.type.function.roff"}
				4: {name: "entity.name.function.roff"}
				5: {name: "variable.parameter.roff"}
				6: {name: "entity.terminator.roff", patterns: [{include: "#string"}]}
				7: {patterns: [{include: "#params"}]}
			endCaptures:
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "entity.terminator.roff"}
				3: {patterns: [{include: "#string"}]}
			patterns: [{include: "$self"}]
		},{
			
			# Number register
			name: "meta.function.request.$2.roff"
			begin: "^([.'])[ \t]*(nr)[ \t]*(\\S+)?[ \t]*(.*)$"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "storage.type.var.roff"}
				3: {name: "variable.parameter.roff"}
				4: {patterns: [{include: "#params"}]}
		},{
			
			# String definition
			name: "meta.function.request.$2.roff"
			begin: "^([.'])[ \t]*((ds)|(as))[ \t]*(\\S+)?[ \t]*(.*)$"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				3: {name: "storage.type.var.roff"}
				4: {name: "entity.name.function.roff"}
				5: {name: "variable.parameter.roff"}
				6: {patterns: [{include: "#params"}]}
		},{
			
			# Underlined passage
			name: "meta.request.ul.roff"
			begin: "^([.'])[ \t]*(ul)(.*?)$"
			end:   "[^\n ]+\n"
			patterns: [{ include: "$self" }]
			beginCaptures:
				1: {name: "punctuation.definition.function.request.roff"}
				2: {name: "entity.function.name.roff"}
				3: {patterns: [{include: "#params"}]}
			endCaptures:
				0: {name: "markup.underline.roff"}
		}]
	
	
	
	
	# Escape sequences
	escapes:
		patterns: [
			{include: "#escapes-copymode"}
			{include: "#escapes-full"}
		]
	
	
	# Limited range of escape sequences permitted in copy-mode
	"escapes-copymode":
		patterns: [{
			
			# Comments
			name: "comment.line.roff"
			begin: "(?:^(\\.|'+)\\s*)?(\\\\\")"
			end: "$"
			beginCaptures:
				1: {name: "punctuation.definition.comment.roff"}
				2: {name: "punctuation.definition.comment.roff"}
		},{
			
			# Empty control lines
			name: "comment.empty.roff"
			match: "^(\\.|'+)[ \t]*$"
			captures:
				1: {name: "punctuation.definition.comment.roff"}
		},
		
		# Basic sequences
		{match: "\\\\\n",    name: "constant.character.escape.newline.roff"}
		{match: "\\\\t",     name: "constant.character.escape.tab.roff"}
		{match: "\\\\a",     name: "constant.character.escape.leader-char.roff"}
		{match: "\\x5C{2}",  name: "constant.character.escape.backslash.roff"}
		{match: "\\\\\\.",   name: "constant.character.escape.dot.roff"}, {
			
			# \nX, \n(XX - Contents of number register "X" or "XX"
			name: "constant.character.escape.function.expand-register.roff"
			match: "(\\\\n\\()(\\S{2})|(\\\\n)(\\S)"
			captures:
				1: {name: "entity.name.roff"}
				3: {name: "entity.name.roff"}
				2: {name: "variable.parameter.roff"}
				4: {name: "variable.parameter.roff"}
		},{
			
			# \*x, \*(xx - Interpolate string "x" or "xx"
			name: "constant.character.escape.function.interpolate-string.roff"
			match: "(\\\\\\*\\()(\\S{2})|(\\\\\\*)(\\S)"
			captures:
				1: {name: "entity.name.roff"}
				3: {name: "entity.name.roff"}
				2: {name: "variable.parameter.roff"}
				4: {name: "variable.parameter.roff"}
		},{
			
			# \$N - Interpolate argument number N (valid range: 1-9)
			name: "constant.character.escape.function.interpolate-argument.roff"
			match: "(\\\\\\$)(\\d)"
			captures:
				1: {name: "entity.name.roff"}
				2: {name: "variable.parameter.roff"}
		}]
	
	
	
	# Every other escape sequence
	"escapes-full":
		patterns: [
		
			# Basic sequences
			{match: "\\\\e",     name: "constant.character.escape.current-escape-char.roff"}
			{match: "\\\\Â´",     name: "constant.character.escape.acute-accent.roff"}
			{match: "\\\\`",     name: "constant.character.escape.grave-accent.roff"}
			{match: "\\\\-",     name: "constant.character.escape.minus.roff"}
			{match: "\\\\ ",     name: "constant.character.escape.space.roff"}
			{match: "\\\\0",     name: "constant.character.escape.space.digit-width.roff"}
			{match: "\\\\\\|",   name: "constant.character.escape.space.one-sixth-em.roff"}
			{match: "\\\\\\^",   name: "constant.character.escape.space.one-twelfth-em.roff"}
			{match: "\\\\&",     name: "constant.character.escape.zero-width-marker.roff"}
			{match: "\\\\%",     name: "constant.character.escape.hyphenation-char.roff"}
			{match: "\\\\c",     name: "constant.character.escape.connect.roff"}
			{match: "\\\\d",     name: "constant.character.escape.downwards.roff"}
			{match: "\\\\p",     name: "constant.character.escape.spread-line.roff"}
			{match: "\\\\r",     name: "constant.character.escape.reverse.roff"}
			{match: "\\\\u",     name: "constant.character.escape.upwards.roff"}
			{match: "\\\\\\{",   name: "constant.character.escape.conditional.begin.roff"}
			{match: "\\\\\\}",   name: "constant.character.escape.conditional.end.roff"}, {
			
				# \(aa - Character named "aa"
				name: "constant.character.escape.function.named-char.roff"
				match: "(?x)
					(\\\\ \\()
					(
						em|hy|bu|sq|ru|14|12|34|fi|fl|ff|Fi|Fl|de|dg|fm|ct|rg|co|pl|mi|eq|sc|aa|ga|ul|sl|ts|sr|rn|ap|
						ua|da|mu|di|cu|ca|sb|sp|ib|ip|if|pd|gr|no|is|pt|es|mo|br|dd|rh|lh|bs|or|ci|lt|lb|rt|rb|lk|rk|
						bv|lf|rf|lc|rc|[>=<|!]=|->|<-|[+]-|\\*[A-IK-UW-Z*a-ik-uw-z]
					)"
				captures:
					1: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
			},{
				
				# Parametric/function-like escape sequences
				name: "constant.character.escape.function.roff"
				match: "(\\\\[bCDhHSlLovwxXN])((.)(.*?)(\\3))"
				captures:
					1: {name: "entity.name.function.roff"}
					2: {name: "string.other.roff"}
					3: {name: "punctuation.definition.begin.roff"}
					4: {patterns: [{include: "#escapes"}]}
					5: {name: "punctuation.definition.end.roff"}
			},{
				
				# Transparent throughput
				name: "meta.throughput.roff"
				begin: "\\\\!"
				beginCaptures:
					0: {name: "constant.character.escape.transparent-line.roff"}
				end: "(?<!\\\\)$"
				patterns: [{include: "#escapes-copymode"}]
			},{
				
				# Font: Roman/regular
				name: "constant.character.escape.font.roff"
				match: "\\\\f[RP1]"
				captures:
					0: {name: "entity.name.roff"}
			}, {
				
				# Font: Italics (typically rendered by nroff as underlined text)
				name: "markup.italic.roff"
				begin: "(\\\\f[I2])"
				end: "(?=\\\\f[A-Za-z0-9])"
				beginCaptures:
					1: {name: "entity.name.roff"}
			},{
				
				# Font: Bold
				name: "markup.bold.roff"
				begin: "(\\\\f[B3])"
				end: "(?=\\\\f[A-Za-z0-9])"
				beginCaptures:
					1: {name: "entity.name.roff"}
			},{
				
				# Font: Bold and italic
				name: "markup.bold.italic.roff"
				begin: "(\\\\f4)"
				end: "(?=\\\\f[A-Za-z0-9])"
				beginCaptures:
					1: {name: "entity.name.roff"}
			},{
				
				# \fX, \f(XX, \fN - Change to font named "X" or "XX", or position N
				name: "constant.character.escape.function.font.roff"
				match: "(\\\\f\\()(\\S{2})|(\\\\f)(\\S)"
				captures:
					1: {name: "entity.name.roff"}
					3: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
					4: {name: "variable.parameter.roff"}
			},{
				
				# \gx, \g(xx - Format of number register "x" or "xx"
				name: "constant.character.escape.function.format-register.roff"
				match: "(\\\\g\\()(\\S{2})|(\\\\g)(\\S)"
				captures:
					1: {name: "entity.name.roff"}
					3: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
					4: {name: "variable.parameter.roff"}
			},{
				
				# \kX - Mark horizontal input place in register "X"
				name: "constant.character.escape.function.mark-input.roff"
				match: "(\\\\k)(\\S)"
				captures:
					1: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
			},{
				
				# \sN, \sÂ±N - Point-size change function; also \s(NN, \sÂ±(NN
				name: "constant.character.escape.function.point-size.roff"
				match: "(\\\\s[-+]?\\(?)(\\d+)"
				captures:
					1: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
			},{
				
				# \zC - Print "C" with zero width (without spacing)
				name: "constant.character.escape.function.zero-width-print.roff"
				match: "(\\\\z)(\\S)"
				captures:
					1: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
			},{
				
				# \Z - Any character not listed above
				name: "constant.character.escape.misc.roff"
				match: "\\\\\\S"
			}]
	
	
	
	
	# Macros
	macros:
		patterns: [{
			
			# .TH: Title
			name: "markup.heading.title.function.man.macro.roff"
			patterns: [{include: "#params"}]
			begin: "^([.'])[ \t]*(TH)"
			end: "$"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .SH: Section heading
			name: "markup.heading.section.function.man.macro.roff"
			patterns: [{include: "#params"}]
			begin: "^([.'])[ \t]*(SH)"
			end: "$"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .SS: Subsection
			name: "markup.heading.subsection.function.man.macro.roff"
			patterns: [{include: "#params"}]
			begin: "^([.'])[ \t]*(SS)"
			end: "$"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .B: Bold
			name: "markup.bold.roff"
			begin: "^([.'])[ \t]*(B)(?:$|[ \t]+|(?=\\\\))"
			end:   "([^\n ]+ ?\n)"
			patterns: [{ include: "$self" }]
			beginCaptures:
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .I: Italic
			name: "markup.italic.roff"
			begin: "^([.'])[ \t]*(I)(?:$|[ \t]+|(?=\\\\))"
			end:   "([^\n ]+ ?\n)"
			patterns: [{ include: "$self" }]
			beginCaptures:
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .BI: Bold and italic
			name: "markup.bold-italic.roff"
			begin: "^([.'])[ \t]*(BI)(?=[ \t\\\\]|$)"
			end:   "(?<!\\\\)(?=\n)"
			beginCaptures:
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{
				begin: '(?x)(?<=
					^[.\']        BI|
					^[.\'][ \t]{1}BI|
					^[.\'][ \t]{2}BI|
					^[.\'][ \t]{3}BI|
					^[.\'][ \t]{4}BI)
					[ \\t]+(".*?(?<!")"(?!")|[^"\\s]\\S*)[ \t]*(?=")'
				end: '(?<=")|(?<!\\\\)$'
				patterns: [{include: "#italic-strings"}]
				beginCaptures:
					1:
						name: "markup.bold.roff"
						patterns: [{include: "#bold-strings"}]
			},{
				begin: '(?=("[^"]*(?<!\\\\)")|\\S+)'
				end: '$|(?:^|[ \t]+|(?<="))(("[^"]*")|\\S+)'
				patterns: [{include: "#bold-strings"}]
				endCaptures:
					1: {name: "markup.italic.roff"}
					2: {patterns: [{include: "#string"}]}
			}]
			
		},{
			
			# .BR: Bold and Roman
			name: "markup.bold-roman.roff"
			begin: "^([.'])[ \t]*(BR)(?=[ \t\\\\]|$)"
			end:   "(?<!\\\\)(?=\n)"
			beginCaptures:
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{
				begin: '(?x)(?<=
					^[.\']        BR|
					^[.\'][ \t]{1}BR|
					^[.\'][ \t]{2}BR|
					^[.\'][ \t]{3}BR|
					^[.\'][ \t]{4}BR)
					[ \\t]+(".*?(?<!")"(?!")|[^"\\s]\\S*)[ \t]*(?=")'
				end: '(?<=")|(?<!\\\\)$'
				patterns: [{include: "#roman-strings"}]
				beginCaptures:
					1:
						name: "markup.bold.roff"
						patterns: [{include: "#bold-strings"}]
			},{
				begin: '(?=("[^"]*(?<!\\\\)")|\\S+)'
				end: '$|(?:^|[ \t]+|(?<="))(?:("[^"]*")|\\S+)'
				patterns: [{include: "#bold-strings"}]
				endCaptures:
					1: {patterns: [{include: "#string"}]}
			}]
		
		},{
			
			# .IB: Italic and bold
			name: "markup.italic-bold.roff"
			begin: "^([.'])[ \t]*(IB)(?=[ \t\\\\]|$)"
			end:   "(?<!\\\\)(?=\n)"
			beginCaptures:
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{
				begin: '(?x)(?<=
					^[.\']        IB|
					^[.\'][ \t]{1}IB|
					^[.\'][ \t]{2}IB|
					^[.\'][ \t]{3}IB|
					^[.\'][ \t]{4}IB)
					[ \\t]+(".*?(?<!")"(?!")|[^"\\s]\\S*)[ \t]*(?=")'
				end: '(?<=")|(?<!\\\\)$'
				patterns: [{include: "#bold-strings"}]
				beginCaptures:
					1:
						name: "markup.italic.roff"
						patterns: [{include: "#italic-strings"}]
			},{
				begin: '(?=("[^"]*(?<!\\\\)")|\\S+)'
				end: '$|(?:^|[ \t]+|(?<="))(("[^"]*")|\\S+)'
				patterns: [{include: "#italic-strings"}]
				endCaptures:
					1: {name: "markup.bold.roff"}
					2: {patterns: [{include: "#string"}]}
			}]
		
		},{
			
			# .IR: Italic and Roman
			name: "markup.italic-roman.roff"
			begin: "^([.'])[ \t]*(IR)(?=[ \t\\\\]|$)"
			end:   "(?<!\\\\)(?=\n)"
			beginCaptures:
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{
				begin: '(?x)(?<=
					^[.\']        IR|
					^[.\'][ \t]{1}IR|
					^[.\'][ \t]{2}IR|
					^[.\'][ \t]{3}IR|
					^[.\'][ \t]{4}IR)
					[ \\t]+(".*?(?<!")"(?!")|[^"\\s]\\S*)[ \t]*(?=")'
				end: '(?<=")|(?<!\\\\)$'
				patterns: [{include: "#roman-strings"}]
				beginCaptures:
					1:
						name: "markup.italic.roff"
						patterns: [{include: "#italic-strings"}]
			},{
				begin: '(?=("[^"]*(?<!\\\\)")|\\S+)'
				end: '$|(?:^|[ \t]+|(?<="))(?:("[^"]*")|\\S+)'
				patterns: [{include: "#italic-strings"}]
				endCaptures:
					1: {patterns: [{include: "#string"}]}
			}]
		
		},{
			
			# .RB: Roman and bold
			name: "markup.roman-bold.roff"
			begin: "^([.'])[ \t]*(RB)(?=[ \t\\\\]|$)"
			end:   "(?<!\\\\)(?=\n)"
			beginCaptures:
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{
				begin: '(?x)(?<=
					^[.\']        RB|
					^[.\'][ \t]{1}RB|
					^[.\'][ \t]{2}RB|
					^[.\'][ \t]{3}RB|
					^[.\'][ \t]{4}RB)
					[ \\t]+(".*?(?<!")"(?!")|[^"\\s]\\S*)[ \t]*(?=")'
				end: '(?<=")|(?<!\\\\)$'
				patterns: [{include: "#bold-strings"}]
				beginCaptures:
					1: patterns: [{include: "#string"}]
			},{
				begin: '(?=("[^"]*(?<!\\\\)")|\\S+)'
				end: '$|(?:^|[ \t]+|(?<="))(("[^"]*")|\\S+)'
				patterns: [{include: "#string"}]
				endCaptures:
					1: {name: "markup.bold.roff"}
					2: {patterns: [{include: "#string"}]}
			}]
		
		},{
			
			# .RI: Roman and italic
			name: "markup.roman-italic.roff"
			begin: "^([.'])[ \t]*(RI)(?=[ \t\\\\]|$)"
			end:   "(?<!\\\\)(?=\n)"
			beginCaptures:
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{
				begin: '(?x)(?<=
					^[.\']        RI|
					^[.\'][ \t]{1}RI|
					^[.\'][ \t]{2}RI|
					^[.\'][ \t]{3}RI|
					^[.\'][ \t]{4}RI)
					[ \\t]+(".*?(?<!")"(?!")|[^"\\s]\\S*)[ \t]*(?=")'
				end: '(?<=")|(?<!\\\\)$'
				patterns: [{include: "#italic-strings"}]
				beginCaptures:
					1: patterns: [{include: "#string"}]
			},{
				begin: '(?=("[^"]*(?<!\\\\)")|\\S+)'
				end: '$|(?:^|[ \t]+|(?<="))(("[^"]*")|\\S+)'
				patterns: [{include: "#string"}]
				endCaptures:
					1: {name: "markup.italic.roff"}
					2: {patterns: [{include: "#string"}]}
			}]
		}]
	
	
	
	
	# Bold words ("Quoted"/Unquoted)
	"bold-strings":
		patterns: [
			{include: "#bold-string"}
			{include: "#bold-bareword"}
		]
	
	# Bold: "Quoted"
	"bold-string":
		patterns: [{
			name: "markup.bold.roff"
			begin: '(?=")'
			end:   '$|(?<=")'
			patterns: [{
				
				# Concealed newline
				begin: "(?<=\\S)\\\\(?=\n)"
				end: "(?<!\\\\)(?=\\s|$)"
				beginCaptures: 0: {name: "constant.character.escape.newline.roff"}
				patterns: [{include: "#bold-string"}]
				
			}, {include: "#string"}]
		}]
	
	# Bold: Unquoted
	"bold-bareword":
		patterns: [{
			name: "markup.bold.roff"
			begin: "\\G(?!\\\\\n)"
			end: "(?=\\s|$)"
			patterns: [{
				# Concealed newline
				begin: "(?<=\\S)\\\\(?=\n)"
				end: "(?<!\\\\)(?=\\s|$)"
				beginCaptures: 0: {name: "constant.character.escape.newline.roff"}
				patterns: [{include: "#bold-bareword"}]
			}]
		}]
	
	
	# Italic words ("Quoted"/Unquoted)
	"italic-strings":
		patterns: [
			{include: "#italic-string"}
			{include: "#italic-bareword"}
		]
	
	# Italic: "Quoted"
	"italic-string":
		patterns: [{
			name: "markup.italic.roff"
			begin: '(?=")'
			end:   '$|(?<=")'
			patterns: [{
				
				# Concealed newline
				begin: "(?<=\\S)\\\\(?=\n)"
				end: "(?<!\\\\)(?=\\s|$)"
				beginCaptures: 0: {name: "constant.character.escape.newline.roff"}
				patterns: [{include: "#italic-string"}]
				
			}, {include: "#string"}]
		}]
	
	
	# Italic: Unquoted
	"italic-bareword":
		patterns: [{
			name: "markup.italic.roff"
			begin: "\\G(?!\\\\\n)"
			end: "(?=\\s|$)"
			patterns: [{
				# Concealed newline
				begin: "(?<=\\S)\\\\(?=\n)"
				end: "(?<!\\\\)(?=\\s|$)"
				beginCaptures: 0: {name: "constant.character.escape.newline.roff"}
				patterns: [{include: "#italic-bareword"}]
			}]
		}]

	
	# Roman words ("Quoted"/Unquoted)
	"roman-strings":
		patterns: [
			{include: "#escapes"}
			{include: "#string"}
		]
