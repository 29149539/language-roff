name: "Roff"
scopeName: "text.roff"
fileTypes: [
	"1", "1b", "1c", "1has", "1in", "1m", "1s", "1x",
	"2",
	"3", "3avl", "3bsm", "3c", "3in", "3m", "3qt", "3x",
	"4",
	"5",
	"6",
	"7", "7d", "7fs", "7i", "7ipp", "7m", "7p",
	"8",
	"9", "9e", "9f", "9p", "9s",
	"chem",
	"eqn",
	"groff",
	"man",
	"mandoc",
	"mdoc",
	"me",
	"mmn", "mmt",
	"ms",
	"mom",
	"n",
	"nroff",
	"rnh",
	"rno",
	"roff",
	"run",
	"t",
	"tmac", "tmac-u",
	"tr",
	"troff"
]
firstLineMatch: """(?x)

	# Manual page with .TH macro on first line
	^\\.TH[ \t]+(?:\\S+)
	|
	
	# Preprocessor line
	# See: https://www.gnu.org/software/groff/manual/html_node/Preprocessors-in-man-pages.html
	^'\\\\\"\\x20[tre]+(?=\\s|$)
	|
	
	# Emacs modeline
	(?i:-\\*-[^*]*(mode:\\s*)?nroff(\\s*;.*?)?\\s*-\\*-
	|
	
	# Vim modeline
	(?:vim?|ex):\\s*(?:set?.*\\s)?(?:syntax|filetype|ft)=[gn]roff\\s?(?:.*:)?)
"""
patterns: [{ include: "#main" }]


repository:
	
	# Common patterns
	main:
		patterns: [
			{include: "#escapes"}
			{include: "#requests"}
			{include: "#macros"}
		]
	
	
	# Control line parameters
	params:
		patterns: [
			{include: "#escapes"}
			{include: "#string"}
			{match: "\\d+", name: "constant.numeric.roff"}
		]
	
	
	# "Double-quoted string"
	string:
		patterns: [{
			name: "string.quoted.double.empty.roff",
			match: '(")(")'
			captures:
				1: {name: "punctuation.definition.string.begin.roff"}
				2: {name: "punctuation.definition.string.end.roff"}
		},{
			name: "string.quoted.double.roff",
			begin: '"(?!")'
			end:   '(?<!")"(?!")|(?<!\\\\)$|(?=\\\\\")'
			beginCaptures: {0: {name: "punctuation.definition.string.begin.roff"}}
			endCaptures:   {0: {name: "punctuation.definition.string.end.roff"}}
			patterns: [include: "#string-escapes"]
		}]
	
	
	# Escape sequences to match inside double-quoted strings
	"string-escapes":
		patterns: [
			{match: '""', name: "constant.character.escape.quote.double.roff"}
			{include: "#escapes"}
		]
	
	
	# List of arguments passed to a request or macro
	"param-group":
		name: "function-call.arguments.roff"
		begin: "\\G|^"
		end:   "\\Z|$"
		patterns: [include: "#params"]
	
	
	# Group of strings delimited with an arbitrary character
	"3-part-title":
		name: "string.3-part.other.roff"
		match: '\\G[ \t]*?(.)((?:(?!\\1).)+)(\\1)((?:(?!\\1).)+)(\\1)((?:(?!\\1).)+)(\\1)'
		captures:
			1: name: "punctuation.definition.string.begin.roff"
			2: name: "entity.string.left.roff", patterns: [include: "#escapes"]
			3: name: "punctuation.definition.string.begin.roff"
			4: name: "entity.string.centre.roff", patterns: [include: "#escapes"]
			5: name: "punctuation.definition.string.end.roff"
			2: name: "entity.string.right.roff", patterns: [include: "#escapes"]
			7: name: "punctuation.definition.string.end.roff"
	
	
	
	# Requests
	requests:
		patterns:[{
			
			# Generic requests without formatting
			name: "meta.function.request.$2.roff"
			begin: "(?x) ^([.'])[ \t]*
				(ab|ad|af|bd|bp|br|c2|cc|ce|cf|ch|cs|cu|da|di|dt|ec|em|eo
				|ev|ex|fc|fi|fl|fp|ft|hc|hw|hy|ig|in|it|lc|lg|lf|ll|ls|lt
				|mc|mk|na|ne|nf|nh|nm|nn|ns|nx|os|pc|pi|pl|pm|pn|po|ps|rd
				|rm|rn|rr|rs|rt|so|sp|ss|sv|sy|ta|tc|ti|tm|tr|uf|vs|wh)"
			end: "(?<!\\\\)(?=\n)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{include: "#param-group"}]
			
		}
		{ include: "#conditionals" }
		{ include: "#definition"   }
		{ include: "#underlines"   }
		{
			# Register assignment
			name: "meta.function.request.$2.roff"
			begin: "^([.'])[ \t]*(nr)[ \t]*(?:(%|ct|dl|dn|dw|dy|ln|mo|nl|sb|st|yr)|(c\\.)|(\\${2}|\\.[$aAbcdfFhHijklLnopRTstuvVwxyz])|(\\.[CgmMOPUxyY])|(\\S+))?[ \t]*(.*)$"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "storage.type.var.roff"}
				3: {name: "constant.language.predefined.register.roff"}
				4: {name: "constant.language.predefined.register.gnu.roff"}
				5: {name: "invalid.illegal.readonly.register.roff"}
				6: {name: "invalid.illegal.readonly.register.gnu.roff"}
				7: {name: "variable.parameter.roff"}
				8: {patterns: [include: "#param-group"]}
		},{
			
			# String definition
			name: "meta.function.request.$2.roff"
			begin: "^([.'])[ \t]*((ds)|(as))[ \t]*(\\S+)?[ \t]*(.*)$"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				3: {name: "storage.type.var.roff"}
				4: {name: "entity.name.function.roff"}
				5: {name: "variable.parameter.roff"}
				6: {patterns: [include: "#param-group"]}
		},{
			
			# Three-part title
			name: "meta.function.request.$2.roff"
			begin: "^([.'])[ \t]*(tl)\\b"
			end:   "(?<!\\\\)$|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "entity.function.name.roff"}
			contentName: "function-call.arguments.roff"
			patterns: [
				{include: "#3-part-title"}
				{include: "#params"}
			]
		}]
	
	
	
	# Conditional input
	conditionals:
		patterns: [{
			
			# Conditional: If
			begin: """(?x)^
				([.'])   [ \t]*      # 1: punctuation.definition.request.roff
				(ie|if)  [ \t]*      # 2: keyword.control.roff
				(!)?                 # 3: keyword.operator.logical
				
				(?:
					# One-character built-in comparison name
					([note])         # 4: constant.language.comparison-name.builtin.$4.roff
					
					|
					
					# Arithmetic
					(                # 5: meta.equation.roff
						
						# Starts with a bracket
						(\\()        # 6: punctuation.definition.begin.roff
						(.*?)        # 7: Include “#arithmetic”
						(\\))        # 8: punctuation.definition.end.roff
						
						# Anything else affixed to it
						(            # 9: Include “#arithmetic”
							(?:
								[^\\s\\(] | # Operators/numbers
								\\(.*?\\)   # More brackets
							)*
						)
						
						|
						
						# Doesn’t start with a bracket
						(?:
							# Starts with a long-form string/register
							(\\\\+[n*]\\(\\S{2}) # 10: Include “#escapes”
							|
							# Starts with a digit or backslash
							(?=\\d|\\\\)
						)
						([^\\s\\(]*) # 11: Sandwiched mathematical junk
						
						(?: # Possible embedded brackets
							(\\()    # 12: punctuation.definition.begin.roff
							(.*?)    # 13: Include “#arithmetic”
							(\\))    # 14: punctuation.definition.end.roff
						)?
						(?: # Possible trailing digits/operators
							[^\\s\\(]*?
							\\d+
						)?
						
						# Ends with a...
						(?<=
							# Digit
							\\d  |
							
							# Closing bracket
							\\)  |
							
							# String/register: Long-form
							\\\\[n*]
							\\(
							\\S{2} |
							
							# String/register: Short-form
							\\\\[n*]\\S
						)
					)
					
					|
					
					# String/variable comparison
					([^\\d\\s\\\\])  # 15: punctuation.definition.string.begin.roff
					(                # 16: variable.parameter.operand.left.roff
						(.*?)        # 17: Include “#escapes”
					)
					(\\15)           # 18: punctuation.definition.string.roff
					(                # 19: variable.parameter.operand.right.roff
						(.*?)        # 20: Include “#escapes”
					)
					(\\15)           # 21: punctuation.definition.string.end.roff
					
					|
					
					# Anything not recognised
					(\\S)            # 22: meta.operand.single.roff
				)?
				
				(.*)                 # 23: Include “#conditional-innards”
			"""
			end: "$"
			beginCaptures:
				0:  {name: "meta.function.request.$2.roff"}
				1:  {name: "punctuation.definition.request.roff"}
				2:  {name: "keyword.control.roff"}
				3:  {name: "keyword.operator.logical"}
				4:  {name: "constant.language.builtin-comparison.$4.roff"}
				5:  {name: "meta.equation.roff"}
				6:  {name: "punctuation.definition.begin.roff"}
				7:  {patterns: [{include: "#arithmetic"}]}
				8:  {name: "punctuation.definition.end.roff"}
				9:  {patterns: [{include: "#arithmetic"}]}
				10: {patterns: [{include: "#escapes"}]}
				11: {patterns: [{include: "#arithmetic"}]}
				12: {name: "punctuation.definition.begin.roff"}
				13: {patterns: [{include: "#arithmetic"}]}
				14: {name: "punctuation.definition.end.roff"}
				15: {name: "punctuation.definition.string.begin.roff"}
				16: {name: "variable.parameter.operand.left.roff"}
				17: {patterns: [{include: "#escapes"}]}
				18: {name: "punctuation.definition.string.roff"}
				19: {name: "variable.parameter.operand.right.roff"}
				20: {patterns: [{include: "#escapes"}]}
				21: {name: "punctuation.definition.string.end.roff"}
				22: {name: "meta.operand.single.roff"}
				23: {patterns: [{include: "#conditional-innards"}]}
		},{
			
			# Conditional: Else
			begin: "^([.'])[ \t]*(el)\\s*(.*)"
			end:   "$"
			beginCaptures:
				0: {name: "meta.function.request.$2.roff"}
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "keyword.control.roff"}
				3: {patterns: [{include: "#conditional-innards"}]}
		}]
	
	"conditional-innards":
		patterns: [{
			begin: "^\\s*(\\\\\\{(?:\\\\(?=\\n))?)?\\s*(.*)"
			end:   "$"
			beginCaptures:
				1: {name: "punctuation.section.conditional.begin.roff"}
				2: {patterns: [{include: "$self"}]}
		}]
	
	
	
	# Basic arithmetic sequences
	arithmetic:
		patterns: [
			{include: "#escapes"},
			{
				name: "meta.brackets.roff"
				match: "(\\()(.*?)(\\))"
				captures:
					1: {name: "punctuation.arithmetic.begin.roff"}
					2: {patterns: [{include: "#arithmetic"}]}
					3: {name: "punctuation.arithmetic.end.roff"}
			},{
				name: "constant.numeric.arithmetic.roff"
				match: "\\d+(?:\\.\\d+)?([A-Za-z]+)?"
				captures:
					1: {name: "punctuation.unit.arithmetic.roff"}
			}
			{match: "[-/+*%]",     name: "keyword.operator.arithmetic.roff"}
			{match: ":|&|[<=>]=?", name: "keyword.operator.logical.roff"}
			{match: "\\|",         name: "keyword.operator.absolute.roff"}
		]
	
	

	# Macro definitions
	definition:
		patterns: [{
			
			# No terminator specified
			name: "meta.function.definition.request.$2.roff"
			begin: "^([.'])[ \t]*((de)|(am))\\s*(\\S+?)?\\s*(\\\\\".*)?$"
			end:   "^(?:[ \t]*\\x5C{2})?\\.[ \t]*\\."
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				3: {name: "storage.type.function.roff"}
				4: {name: "entity.name.function.roff"}
				5: {name: "variable.parameter.roff"}
				6: {patterns: [include: "#escapes"]}
				7: {patterns: [include: "#param-group"]}
			endCaptures:
				0: {name: "punctuation.definition.request.roff"}
			patterns: [include: "$self"]
		},{
			
			# Terminator included
			name: "meta.function.definition.request.with-terminator.$2.roff"
			begin: "^([.'])[ \t]*((de)|(am))\\s*(\\S+)\\s*(\"[^\"]+\"?|\\S+?(?=\\s|\\\\\"))?(.*)$"
			end:   "^(\\.)[ \t]*((\\6)(?=$|\\s|\\\\(?:$|\")))"
			beginCaptures:
				1: {name: "punctuation.definition.request.roff"}
				3: {name: "storage.type.function.roff"}
				4: {name: "entity.name.function.roff"}
				5: {name: "variable.parameter.roff"}
				6: {name: "entity.terminator.roff", patterns: [{include: "#string"}]}
				7: {patterns: [include: "#param-group"]}
			endCaptures:
				1: {name: "punctuation.definition.request.roff"}
				2: {name: "entity.terminator.roff"}
				3: {patterns: [{include: "#string"}]}
			patterns: [{include: "$self"}]
		}]
	

	# Underlined passages
	underlines:
		patterns: [{
			
			# .ul 0: Empty request/noop
			name: "meta.request.ul.roff"
			match: "^([.'])[ \t]*(ul)\\s*(0+)(?:(?!\\\\\")[\\D])*(?=\\s|$)(.*)$"
			captures:
				1: {name: "punctuation.definition.function.request.roff"}
				2: {name: "entity.function.name.roff"}
				3: {name: "constant.numeric.roff"}
				4: {patterns: [{include: "#params"}]}
			
		}, {
			
			# Underline following line
			name: "meta.request.ul.roff"
			begin: "^([.'])[ \t]*(ul)(.*?)$\\n"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: {name: "punctuation.definition.function.request.roff"}
				2: {name: "entity.function.name.roff"}
				3: {patterns: [{include: "#params"}]}
			patterns: [{
				
				# Ignore control-lines
				begin: "^(?=[.']|\\\\!)(.*)$\\n"
				end:   "^"
				beginCaptures:
					1: {patterns: [{include: "$self"}]}
			}, {
				name: "markup.underline.roff"
				begin: "^(?![.'])"
				end:   "(?<!\\\\)$"
			}]
		}]
	
	
	# Underline first argument only
	"underline-first":
		patterns: [{
			
			# Unquoted string
			contentName: "markup.underline.roff"
			begin: "\\G[ \t]*(?!\")(?=(?:[^\\s\\\\]|\\\\(?!\").)+)"
			end:   "(?<![^\\\\]\\\\|^\\\\)(?=\\s|$)|(?=\\\\\")"
			patterns: [include: "#escapes"]
		},{
		
			# Null argument
			name: "string.quoted.double.empty.roff"
			match: '(")(")'
			beginCaptures: {0: {name: "punctuation.definition.string.begin.roff"}}
			endCaptures:   {0: {name: "punctuation.definition.string.end.roff"}}
		},{
			# Quoted string
			name: "string.quoted.double.roff"
			contentName: "markup.underline.roff"
			begin: '\\G[ \t]*(")'
			end:   '((?:"")*)"(?!")|(?<!\\\\)$|(?=\\\\\")'
			beginCaptures: 1: name: "punctuation.definition.string.begin.roff"
			endCaptures:
				0: name: "punctuation.definition.string.end.roff"
				1: name: "markup.underline.roff", patterns: [include: "#string-escapes"]
			patterns: [include: "#string-escapes"]
		}
		{include: "#escapes"}
		{include: "#string"}]
	
	
	
	# Escape sequences
	escapes:
		patterns: [{
			
			# Backslashed escape sequences: \t -> \\t
			match: "(\\\\+?)(?=\\1\\S)"
			name: "punctuation.definition.concealed.escape.backslash.roff"
		},
			{include: "#escapes-copymode"}
			{include: "#escapes-full"}]
	
	
	# Limited range of escape sequences permitted in copy-mode
	"escapes-copymode":
		patterns: [{
			
			# Comments
			name: "comment.line.roff"
			begin: "(?:^(\\.|'+)\\s*)?(\\\\\")"
			end: "$"
			beginCaptures:
				1: {name: "punctuation.definition.comment.roff"}
				2: {name: "punctuation.definition.comment.roff"}
		},{
			
			# Empty control lines
			name: "comment.empty.roff"
			match: "^(\\.|'+)[ \t]*$"
			captures:
				1: {name: "punctuation.definition.comment.roff"}
		},{
			
			# Concealed newline
			name: "constant.character.escape.newline.roff"
			begin: "\\\\$\\n?"
			end: "^"
		}
		
		# Basic sequences
		{match: "\\\\t",     name: "constant.character.escape.tab.roff"}
		{match: "\\\\a",     name: "constant.character.escape.leader-char.roff"}
		{match: "\\x5C{2}",  name: "constant.character.escape.backslash.roff"}
		{match: "\\\\\\.",   name: "constant.character.escape.dot.roff"}, {
			
			# \nX, \n(XX - Contents of number register "X" or "XX"
			name: "constant.character.escape.function.expand-register.roff"
			match: "(\\\\n\\()(?:(ct|dl|dn|dw|dy|ln|mo|nl|sb|st|yr)|(c\\.)|(\\${2}|\\.[$aAbcdfFhHijklLnopRTstuvVwxyz])|(\\.[CgmMOPUxyY])|(\\S{2}))|(\\\\n)(?:(%)|(\\S))"
			captures:
				1: {name: "entity.name.roff"}
				2: {name: "constant.language.predefined.register.roff"}
				3: {name: "constant.language.predefined.register.gnu.roff"}
				4: {name: "constant.language.predefined.register.readonly.roff"}
				5: {name: "constant.language.predefined.register.readonly.gnu.roff"}
				6: {name: "variable.parameter.roff"}
				7: {name: "entity.name.roff"}
				8: {name: "constant.language.predefined.register.roff"}
				9: {name: "variable.parameter.roff"}
		},{
			
			# \*x, \*(xx - Interpolate string "x" or "xx"
			name: "constant.character.escape.function.interpolate-string.roff"
			match: "(\\\\\\*\\()(\\S{2})|(\\\\\\*)(\\S)"
			captures:
				1: {name: "entity.name.roff"}
				3: {name: "entity.name.roff"}
				2: {name: "variable.parameter.roff"}
				4: {name: "variable.parameter.roff"}
		},{
			
			# \$N - Interpolate argument number N (valid range: 1-9)
			name: "constant.character.escape.function.interpolate-argument.roff"
			match: "(\\\\\\$)(\\d)"
			captures:
				1: {name: "entity.name.roff"}
				2: {name: "variable.parameter.roff"}
		}]
	
	
	
	# Every other escape sequence
	"escapes-full":
		patterns: [
		
			# Basic sequences
			{match: "\\\\e",     name: "constant.character.escape.current-escape-char.roff"}
			{match: "\\\\´",     name: "constant.character.escape.acute-accent.roff"}
			{match: "\\\\`",     name: "constant.character.escape.grave-accent.roff"}
			{match: "\\\\-",     name: "constant.character.escape.minus.roff"}
			{match: "\\\\ ",     name: "constant.character.escape.space.roff"}
			{match: "\\\\0",     name: "constant.character.escape.space.digit-width.roff"}
			{match: "\\\\\\|",   name: "constant.character.escape.space.one-sixth-em.roff"}
			{match: "\\\\\\^",   name: "constant.character.escape.space.one-twelfth-em.roff"}
			{match: "\\\\&",     name: "constant.character.escape.zero-width-marker.roff"}
			{match: "\\\\%",     name: "constant.character.escape.hyphenation-char.roff"}
			{match: "\\\\c",     name: "constant.character.escape.connect.roff"}
			{match: "\\\\d",     name: "constant.character.escape.downwards.roff"}
			{match: "\\\\p",     name: "constant.character.escape.spread-line.roff"}
			{match: "\\\\r",     name: "constant.character.escape.reverse.roff"}
			{match: "\\\\u",     name: "constant.character.escape.upwards.roff"}, {
			
				# \(aa - Character named "aa"
				name: "constant.character.escape.function.named-char.roff"
				match: "(?x)
					(\\\\ \\()
					(
						em|hy|bu|sq|ru|14|12|34|fi|fl|ff|Fi|Fl|de|dg|fm|ct|rg|co|pl|mi|eq|sc|aa|ga|ul|sl|ts|sr|rn|ap|
						ua|da|mu|di|cu|ca|sb|sp|ib|ip|if|pd|gr|no|is|pt|es|mo|br|dd|rh|lh|bs|or|ci|lt|lb|rt|rb|lk|rk|
						bv|lf|rf|lc|rc|[>=<|!]=|->|<-|[+]-|\\*[A-IK-UW-Z*a-ik-uw-z]
					)"
				captures:
					1: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
			},{
				
				# Conditional input: Begin
				name: "meta.function.begin.roff"
				match: "(?:^(\\.|'+)[ \t]*)?(\\\\\\{(?:\\\\(?=\\n))?)"
				captures:
					1: {name: "punctuation.definition.request.roff"}
					2: {name: "punctuation.section.conditional.begin.roff"}
			},{
				
				# Conditional input: End
				name: "meta.function.end.roff"
				match: "(?:^(\\.|'+)[ \t]*)?(\\\\\\}(?:\\\\(?=\\n))?)"
				captures:
					1: {name: "punctuation.definition.request.roff"}
					2: {name: "punctuation.section.conditional.end.roff"}
			},{
				
				# Parametric/function-like escape sequences
				name: "constant.character.escape.function.roff"
				match: "(\\\\[bCDhHSlLovwxXN])((.)(.*?)(\\3))"
				captures:
					1: {name: "entity.name.function.roff"}
					2: {name: "string.other.roff"}
					3: {name: "punctuation.definition.begin.roff"}
					4: {patterns: [{include: "#escapes"}]}
					5: {name: "punctuation.definition.end.roff"}
			},{
				
				# Transparent throughput
				name: "meta.throughput.roff"
				begin: "\\\\!"
				beginCaptures:
					0: {name: "constant.character.escape.transparent-line.roff"}
				end: "(?<!\\\\)$"
				patterns: [{include: "#escapes-copymode"}]
			},{
				
				# Font: Roman/regular
				name: "constant.character.escape.font.roff"
				match: "\\\\f[RP1]"
				captures:
					0: {name: "entity.name.roff"}
			}, {
				
				# Font: Italics (typically rendered by nroff as underlined text)
				name: "markup.italic.roff"
				begin: "(\\\\f[I2])"
				end: "(?=\\\\f[A-Za-z0-9])"
				beginCaptures:
					1: {name: "entity.name.roff"}
			},{
				
				# Font: Bold
				name: "markup.bold.roff"
				begin: "(\\\\f[B3])"
				end: "(?=\\\\f[A-Za-z0-9])"
				beginCaptures:
					1: {name: "entity.name.roff"}
			},{
				
				# Font: Bold and italic
				name: "markup.bold.italic.roff"
				begin: "(\\\\f4)"
				end: "(?=\\\\f[A-Za-z0-9])"
				beginCaptures:
					1: {name: "entity.name.roff"}
			},{
				
				# \fX, \f(XX, \fN - Change to font named "X" or "XX", or position N
				name: "constant.character.escape.function.font.roff"
				match: "(\\\\f\\()(\\S{2})|(\\\\f)(\\S)"
				captures:
					1: {name: "entity.name.roff"}
					3: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
					4: {name: "variable.parameter.roff"}
			},{
				
				# \gx, \g(xx - Format of number register "x" or "xx"
				name: "constant.character.escape.function.format-register.roff"
				match: "(\\\\g\\()(\\S{2})|(\\\\g)(\\S)"
				captures:
					1: {name: "entity.name.roff"}
					3: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
					4: {name: "variable.parameter.roff"}
			},{
				
				# \kX - Mark horizontal input place in register "X"
				name: "constant.character.escape.function.mark-input.roff"
				match: "(\\\\k)(\\S)"
				captures:
					1: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
			},{
				
				# \sN, \s±N - Point-size change function; also \s(NN, \s±(NN
				name: "constant.character.escape.function.point-size.roff"
				match: "(\\\\s[-+]?\\(?)(\\d+)"
				captures:
					1: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
			},{
				
				# \zC - Print "C" with zero width (without spacing)
				name: "constant.character.escape.function.zero-width-print.roff"
				match: "(\\\\z)(\\S)"
				captures:
					1: {name: "entity.name.roff"}
					2: {name: "variable.parameter.roff"}
			},{
				
				# \Z - Any character not listed above
				name: "constant.character.escape.misc.roff"
				match: "\\\\\\S"
			}]
	
	
	
	
	# Macros
	macros:
		patterns: [
			{include: "#man"}
			{include: "#ms"}
			{include: "#mm"}
			{include: "#www"}
		]
	
	
	# Manuscript macros
	ms:
		patterns: [{
			name: "meta.function.${2:/downcase}.ms.macro.roff"
			begin: "(?x) ^([.'])[ \t]*
				(1C|2C|AB|AE|AI|AU|B1|B2|BT|BX|DA|DE|DS|EN|EQ|FE|FS|IP|KE|KF|KS|LG
				|LP|MC|ND|NH|NL|P1|PE|PP|PS|PT|PX|QP|RP|SH|SM|TA|TC|TE|TL|TS|XA|XE
				|XP|XS)\\b"
			end: "(?<!\\\\)(?=\n)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{include: "#params"}]
		},{
			
			# Headers and footers
			name: "meta.function.${2:/downcase}.ms.macro.roff"
			contentName: "function-call.arguments.roff"
			begin: "^([.'])[ \t]*([EO][FH])\\b"
			end:   "(?<!\\\\)(?=\n)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [
				{include: "#3-part-title"}
				{include: "#escapes"}
				{include: "#string"}
			]
		},{
			# Reference
			name: "meta.function.reference.ms.macro.roff"
			begin: "^([.'])[ \t]*(\\[)\\s*(\\\\\".*)?$"
			end:   "^([.'])[ \t]*(\\])(?=\\s|$|\\\\\")"
			contentName: "entity.reference.name.ms.macro.roff"
			patterns: [include: "$self"]
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "punctuation.section.function.begin.roff"}
				3: {patterns: [include: "#escapes"]}
			endCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "punctuation.section.function.begin.roff"}
		},{
			
			# Deprecated macros
			name: "meta.deprecated.function.${2:/downcase}.ms.macro.roff"
			contentName: "function-call.arguments.roff"
			begin: "^([.'])[ \t]*((De|Ds))\\b"
			end: "(?<!\\\\)$|(?=\\s*\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {name: "invalid.deprecated.roff"}
			patterns: [
				{include: "#escapes"}
				{include: "#string"}
			]
		},{
		
			# Monospaced/constant-width text
			name: "meta.function.cw.ms.macro.roff"
			begin: "^([.'])[ \t]*(CW)\\b"
			end: "(?<!\\\\)$|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{
				
				# Unquoted string
				name: "markup.raw.roff"
				begin: "\\G[ \t]*(?!\")(?=(?:[^\\s\\\\]|\\\\(?!\").)+)"
				end:   "(?<![^\\\\]\\\\|^\\\\)(?=\\s|$)|(?=\\\\\")"
				patterns: [include: "#escapes"]
			},{
			
				# Null argument
				name: "markup.raw.roff"
				match: '(")(")'
				captures:
					0: {name: "string.quoted.double.empty.roff"}
					1: {name: "punctuation.definition.string.begin.roff"}
					2: {name: "punctuation.definition.string.end.roff"}
			},{
				
				# Quoted string
				name: "string.quoted.double.roff"
				contentName: "markup.raw.roff"
				begin: '\\G[ \t]*(")'
				end:   '((?:"")*)"(?!")|(?<!\\\\)$|(?=\\\\\")'
				beginCaptures: 1: name: "punctuation.definition.string.begin.roff"
				endCaptures:
					0: name: "punctuation.definition.string.end.roff"
					1: name: "markup.raw.roff", patterns: [include: "#string-escapes"]
				patterns: [include: "#string-escapes"]
			}
			{include: "#escapes"}
			{include: "#string"}]
		},{
			
			# Underlined text
			name: "meta.function.ul.ms.macro.roff"
			begin: "^([.'])[ \t]*(UL)\\b"
			end: "(?<!\\\\)$|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "#underline-first"]
		}]
	
	
	# Memorandum macros
	mm:
		patterns: [{
			name: "meta.function.${2:/downcase}.mm.macro.roff"
			begin: "(?x) ^([.'])[ \t]*
				(1C|2C|AE|AF|AL|APP|APPSK|AS|AST|AT|AU|AV|AVL|B1|B2|BE|BL|BS|BVL
				|COVER|COVEND|DE|DF|DL|DS|EC|EF|EH|EN|EOP|EPIC|EQ|EX|FC|FD|FE|FG
				|FS|GETHN|GETPN|GETR|GETST|H|HC|HM|HU|HX|HY|HZ|IA|IE|INITI|INITR
				|IND|INDP|ISODATE|LB|LC|LE|LI|LT|LO|MC|ML|MT|MOVE|MULB|MULN|MULE
				|nP|NCOL|NS|ND|OF|OH|OP|PGFORM|PGNH|PIC|PE|PF|PH|PS|PX?|RD|RF|RL
				|RP|RS|S|SA|SETR|SG|SK|SM|SP|TA?B|TC|TE|TL|TM|TP|TS|TX|TY|VERBON
				|VERBOFF|VL|VM|WA|WE|WC|\\)E)\\b"
			end: "(?<!\\\\)$|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [{include: "#params"}]
		}]
	
	
	# Webpage macros
	www:
		patterns: [{
			
			name: "meta.function.${2:/downcase}.www.macro.roff"
			begin: "(?x) ^([.'])[ \t]*
				(ALN|BCL|BGIMG|DC|DLE|DLS|HEAD|HR|HTM?L|HX|JOBNAME
				|LI|LINKSTYLE|LK|LNE|LNS|MPIMG|NHR|P?IMG|TAG)\\b"
			end: "(?<!\\\\)$|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "#params"]
		},{
			
			# Macros that take URIs as their first argument
			name: "meta.function.${2:/downcase}.www.macro.roff"
			begin: "^([.'])[ \t]*(URL|FTP|MTO)\\b"
			end:   "(?<!\\\\)(?=$)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "#underline-first"]
		},{
			
			# Code blocks
			name: "meta.function.${2:/downcase}.www.macro.roff"
			contentName: "markup.raw.roff"
			begin: "^([.'])[ \t]*(CDS)\\b\\s*(\\\\\".*)?$"
			end:   "^([.'])[ \t]*(CDE)\\b"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {patterns: [include: "#escapes"]}
			endCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "$self"]
		},{
			
			# Headings
			name: "markup.heading.$3.www.macro.roff"
			contentName: "string.unquoted.heading.roff"
			begin: "^([.'])[ \t]*(HnS)\\b(?:\\s*(\\d+))?(?:\\s*(\\\\\".*)$)?"
			end:   "^([.'])[ \t]*(HnE)\\b(.*)$"
			beginCaptures:
				0: {name: "meta.function.${2:/downcase}.macro.roff"}
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {name: "constant.numeric.roff"}
				4: {patterns: [include: "#escapes"]}
			endCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {patterns: [include: "#escapes"]}
			patterns: [include: "$self"]
		},{
			
			# Ordered lists
			name: "meta.function.${2:/downcase}.www.macro.roff"
			contentName: "markup.list.ordered.roff"
			begin: "^([.'])[ \t]*(OLS)\\b\\s*(\\\\\".*)?$"
			end:   "^([.'])[ \t]*(OLE)\\b"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {patterns: [include: "#escapes"]}
			endCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "$self"]
		},{
			
			# Unordered lists
			name: "meta.function.${2:/downcase}.www.macro.roff"
			contentName: "markup.list.ordered.roff"
			begin: "^([.'])[ \t]*(ULS)\\b\\s*(\\\\\".*)?$"
			end:   "^([.'])[ \t]*(ULE)\\b"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {patterns: [include: "#escapes"]}
			endCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "$self"]
		}]
	
	
	# Manual-page macros
	man:
		patterns: [{
			
			# Various macros that don't need special highlighting
			name: "meta.function.${2:/downcase}.man.macro.roff"
			begin: "^([.'])[ \t]*(RE|RS|SM|BT|PT)\\b"
			end:   "(?<!\\\\)(?=$)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "#param-group"]
		},{
			
			# .TH: Title
			name: "markup.heading.title.function.man.macro.roff"
			patterns: [include: "#param-group"]
			begin: "^([.'])[ \t]*(TH)\\b"
			end: "$|(?=\\\\\")"
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .SH: Section heading
			name: "markup.heading.section.function.man.macro.roff"
			patterns: [include: "#param-group"]
			begin: "^([.'])[ \t]*(SH)\\b"
			end: "$|(?=\\\\\")"
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .SS: Subsection
			name: "markup.heading.subsection.function.man.macro.roff"
			patterns: [include: "#param-group"]
			begin: "^([.'])[ \t]*(SS)\\b"
			end: "$|(?=\\\\\")"
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
		
			# .EX: Example code
			contentName: "markup.raw.roff"
			begin: "^([.'])[ \t]*(EX)\\s*(\\\\\".*)?$"
			end:   "^([.'])[ \t]*(EE)\\b"
			patterns: [{ include: "$self" }]
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
				3: {patterns: [{include: "#escapes-copymode"}]}
			endCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .LP/.PP/.P: Paragraph
			name: "meta.function.paragraph.man.macro.roff"
			begin: "^([.'])[ \t]*(LP|PP?)\\b"
			end:   "(?<!\\\\)(?=$)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "#params"]
		},{
			
			# .IP: Indented paragraph
			name: "meta.function.indented-paragraph.man.macro.roff"
			begin: "^([.'])[ \t]*(IP)\\b"
			end:   "(?<!\\\\)(?=$)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "#param-group"]
		},{
			
			# .TP: Titled paragraph
			name: "meta.function.titled-paragraph.man.macro.roff"
			begin: "^([.'])[ \t]*(TP)\\b"
			end:   "(?<!\\\\)(?=$)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
			patterns: [include: "#param-group"]
		},{
			
			# .HP: Hanging paragraph (deprecated)
			name: "meta.deprecated.function.hanging-paragraph.man.macro.roff"
			begin: "^([.'])[ \t]*((HP))\\b"
			end:   "(?<!\\\\)(?=$)|(?=\\\\\")"
			beginCaptures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {name: "invalid.deprecated.roff"}
			patterns: [include: "#param-group"]
		},{
			
			# .MT/.ME: Hyperlink (GNU extension)
			name: "meta.function.mailto.hyperlink.man.macro.gnu.roff"
			begin: "^([.'])[ \t]*(MT)\\b"
			end:   "^([.'])[ \t]*(ME)\\b(.*)\\s*(\\\\\".*)?$"
			beginCaptures:
				1: {name: "punctuation.definition.macro.gnu.roff"}
				2: {name: "entity.function.name.gnu.roff"}
			endCaptures:
				1: {name: "punctuation.definition.macro.gnu.roff"}
				2: {name: "entity.function.name.gnu.roff"}
				3: {patterns: [include: "#param-group"]}
				4: {patterns: [include: "#escapes"]}
			patterns: [include: "#underline-first"]
		},{
			
			# .UR/.UE: URL (GNU extension)
			name: "meta.function.hyperlink.man.macro.gnu.roff"
			begin: "^([.'])[ \t]*(UR)\\b"
			end:   "^([.'])[ \t]*(UE)\\b(.*)\\s*(\\\\\".*)?$"
			beginCaptures:
				1: {name: "punctuation.definition.macro.gnu.roff"}
				2: {name: "entity.function.name.gnu.roff"}
			endCaptures:
				1: {name: "punctuation.definition.macro.gnu.roff"}
				2: {name: "entity.function.name.gnu.roff"}
				3: {patterns: [include: "#param-group"]}
				4: {patterns: [include: "#escapes"]}
			patterns: [include: "#underline-first"]
		},{
			
			# .B/.SB: Bold
			contentName: "markup.bold.roff"
			begin: "^([.'])[ \t]*(S?B)(\\s*\\\\\".*$)?(?=$|[ \t]+|\\\\)"
			end:   "^(?=[.'])|(?=\\\\\")|((\\S+[ \t]*)(?<![^\\\\]\\\\)\n)"
			patterns: [{ include: "$self" }]
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
				3: {patterns: [{include: "#escapes-copymode"}]}
			endCaptures:
				1: {name: "markup.bold.roff"}
				2: {patterns: [{include: "#escapes"}]}
		},{
			
			# .I: Italic
			contentName: "markup.italic.roff"
			begin: "^([.'])[ \t]*(I)(\\s*\\\\\".*$)?(?=$|[ \t]+|\\\\)"
			end:   "^(?=[.'])|(?=\\\\\")|((\\S+[ \t]*)(?<![^\\\\]\\\\)\n)"
			patterns: [{ include: "$self" }]
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
				3: {patterns: [{include: "#escapes-copymode"}]}
			endCaptures:
				1: {name: "markup.italic.roff"}
				2: {patterns: [{include: "#escapes"}]}
		
		}, include: "#alternating-fonts"]


	# Repeating/combined-font macros
	"alternating-fonts":
		patterns: [{
			
			# .BI: Bold + Italic
			name: "meta.bold-italic.roff"
			begin: "^([.'])[ \t]*(BI)\\b"
			end:   '(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
			patterns: [
				{include: "#odd-bold"}
				{include: "#even-italic-after-bold"}
				{include: "#even-italic"}
				{include: "#bridge-escapes"}
			]
		},{
			
			# .BR: Bold + Roman
			name: "meta.bold-roman.roff"
			begin: "^([.'])[ \t]*(BR)\\b"
			end:   '(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
			patterns: [
				{include: "#odd-bold"}
				{include: "#even-roman-after-bold"}
				{include: "#even-roman"}
				{include: "#bridge-escapes"}
			]
		},{
			
			# .IB: Italic + Bold
			name: "meta.italic-bold.roff"
			begin: "^([.'])[ \t]*(IB)\\b"
			end:   '(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
			patterns: [
				{include: "#odd-italic"}
				{include: "#even-bold-after-italic"}
				{include: "#even-bold"}
				{include: "#bridge-escapes"}
			]
		},{
			
			# .IR: Italic + Roman
			name: "meta.italic-roman.roff"
			begin: "^([.'])[ \t]*(IR)\\b"
			end:   '(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
			patterns: [
				{include: "#odd-italic"}
				{include: "#even-roman-after-italic"}
				{include: "#even-roman"}
				{include: "#bridge-escapes"}
			]
		},{
			
			# .RB: Roman + Bold
			name: "meta.roman-bold.roff"
			begin: "^([.'])[ \t]*(RB)\\b"
			end:   '(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
			patterns: [
				{include: "#odd-roman"}
				{include: "#even-bold-after-roman"}
				{include: "#even-bold"}
				{include: "#bridge-escapes"}
			]
		},{
			
			# .RI: Roman + Italic
			name: "meta.roman-italic.roff"
			begin: "^([.'])[ \t]*(RI)\\b"
			end:   '(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures:
				0: {name: "meta.function.man.macro.roff"}
				1: {name: "punctuation.definition.function.macro.roff"}
				2: {name: "entity.name.function.roff"}
			patterns: [
				{include: "#odd-roman"}
				{include: "#even-italic-after-roman"}
				{include: "#even-italic"}
				{include: "#bridge-escapes"}
			]
		}]
	

	"bridge-escapes":
		patterns: [
			{name: "constant.character.escape.newline.roff", begin: "[ \t]+\\\\$\\n?", end: "^"}
			{name: "constant.character.escape.newline.roff", begin: "\\\\$\\n?", end: "^[ \t]*"}
		]


	"odd-bold":
		patterns: [{
			name: "markup.bold.roff"
			begin: '[ \t]+(")'
			end:   '(")[ \t]*|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures: 1: name: "punctuation.definition.string.begin.roff"
			endCaptures:   1: name: "punctuation.definition.string.end.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		},{
			name: "markup.bold.roff"
			begin: '[ \t]+(\\\\$\\n?)'
			end:   '(?<!^)[ \t]+|(?=\\\\")|(?<!\\\\)(?=\\n|$)'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes", {
				begin: "^[ \t]+"
				end: "(?=\\S)|(?<!\\\\)(?:$|\\n)"
			}]
		},{
			name: "markup.bold.roff"
			begin: '[ \t]+(?!")((?:[^\\s"\\\\]|\\\\(?!").)+)'
			end:   '[ \t]+|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes"]
		}]


	"odd-italic":
		patterns: [{
			name: "markup.italic.roff"
			begin: '[ \t]+(")'
			end:   '(")[ \t]*|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures: 1: name: "punctuation.definition.string.begin.roff"
			endCaptures:   1: name: "punctuation.definition.string.end.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		},{
			name: "markup.italic.roff"
			begin: '[ \t]+(\\\\$\\n?)'
			end:   '(?<!^)[ \t]+|(?=\\\\")|(?<!\\\\)(?=\\n|$)'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes", {
				begin: "^[ \t]+"
				end: "(?=\\S)|(?<!\\\\)(?:$|\\n)"
			}]
		},{
			name: "markup.italic.roff"
			begin: '[ \t]+(?!")((?:[^\\s"\\\\]|\\\\(?!").)+)'
			end:   '[ \t]+|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes"]
		}]


	"odd-roman":
		patterns: [{
			name: "markup.plain.roff"
			begin: '[ \t]+(")'
			end:   '(")[ \t]*|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures: 1: name: "punctuation.definition.string.begin.roff"
			endCaptures:   1: name: "punctuation.definition.string.end.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		},{
			name: "markup.plain.roff"
			begin: '[ \t]+(\\\\$\\n?)'
			end:   '(?<!^)[ \t]+|(?=\\\\")|(?<!\\\\)(?=\\n|$)'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes", {
				begin: "^[ \t]+"
				end: "(?=\\S)|(?<!\\\\)(?:$|\\n)"
			}]
		},{
			name: "markup.plain.roff"
			begin: '[ \t]+(?!")((?:[^\\s"\\\\]|\\\\(?!").)+)'
			end:   '[ \t]+|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes"]
		}]



	"even-bold":
		patterns: [
			name: "markup.bold.roff"
			begin: '(?<=^|\\s|")(?!"|\\\\")((?:[^\\s"\\\\]|\\\\(?!").)+)'
			end:   '(?=[ \t])|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes"]
		]

	"even-italic":
		patterns: [
			name: "markup.italic.roff"
			begin: '(?<=^|\\s|")(?!"|\\\\")((?:[^\\s"\\\\]|\\\\(?!").)+)'
			end:   '(?=[ \t])|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes"]
		]
	
	"even-roman":
		patterns: [
			name: "markup.plain.roff"
			begin: '(?<=^|\\s|")(?!"|\\\\")((?:[^\\s"\\\\]|\\\\(?!").)+)'
			end:   '(?=[ \t])|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)|(?=\\\\")'
			beginCaptures: 1: patterns: [include: "#escapes"]
			patterns: [include: "#escapes"]
		]
	
	
	"even-bold-after-italic":
		patterns: [{
			contentName: "markup.bold.roff"
			begin: '(")'
			end:   '(("))([^"\\s]+[ \t]*)?|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures:
				0: name: "markup.bold.roff"
				1: name: "punctuation.definition.string.begin.roff"
			endCaptures:
				1: name: "markup.bold.roff"
				2: name: "punctuation.definition.string.end.roff"
				3: name: "markup.italic.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		}]
	
	"even-bold-after-roman":
		patterns: [{
			contentName: "markup.bold.roff"
			begin: '(")'
			end:   '(("))([^"\\s]+[ \t]*)?|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures:
				0: name: "markup.bold.roff"
				1: name: "punctuation.definition.string.begin.roff"
			endCaptures:
				1: name: "markup.bold.roff"
				2: name: "punctuation.definition.string.end.roff"
				3: name: "markup.plain.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		}]
	
	
	"even-italic-after-bold":
		patterns: [{
			contentName: "markup.italic.roff"
			begin: '(")'
			end:   '(("))([^"\\s]+[ \t]*)?|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures:
				0: name: "markup.italic.roff"
				1: name: "punctuation.definition.string.begin.roff"
			endCaptures:
				1: name: "markup.italic.roff"
				2: name: "punctuation.definition.string.end.roff"
				3: name: "markup.bold.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		}]
	
	"even-italic-after-roman":
		patterns: [{
			contentName: "markup.italic.roff"
			begin: '(")'
			end:   '(("))([^"\\s]+[ \t]*)?|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures:
				0: name: "markup.italic.roff"
				1: name: "punctuation.definition.string.begin.roff"
			endCaptures:
				1: name: "markup.italic.roff"
				2: name: "punctuation.definition.string.end.roff"
				3: name: "markup.plain.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		}]


	"even-roman-after-bold":
		patterns: [{
			contentName: "markup.plain.roff"
			begin: '(")'
			end:   '(("))([^"\\s]+[ \t]*)?|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures:
				0: name: "markup.plain.roff"
				1: name: "punctuation.definition.string.begin.roff"
			endCaptures:
				1: name: "markup.plain.roff"
				2: name: "punctuation.definition.string.end.roff"
				3: name: "markup.bold.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		}]

	"even-roman-after-italic":
		patterns: [{
			contentName: "markup.plain.roff"
			begin: '(")'
			end:   '(("))([^"\\s]+[ \t]*)?|(?=\\\\")|(?<![^\\\\]\\\\|^\\\\)(?=\\n|$)'
			beginCaptures:
				0: name: "markup.plain.roff"
				1: name: "punctuation.definition.string.begin.roff"
			endCaptures:
				1: name: "markup.plain.roff"
				2: name: "punctuation.definition.string.end.roff"
				3: name: "markup.italic.roff"
			patterns: [{
				match: '((?:[^"\\\\]|""|\\\\(?!").)+)(?!$)'
				captures: 1: patterns: [include: "#string-escapes"]
			}, include: "#string-escapes"]
		}]
