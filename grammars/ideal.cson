# IDEAL picture preprocesor
scopeName: "source.ideal"
patterns: [ include: "#main" ]

repository:
	
	# Tags used for embedding IDEAL source
	tags:
		begin: "^([.'])[ \t]*(IS)\\b\\s*(\\\\[\"#].*$)?"
		end:   "^([.'])[ \t]*(IE)\\b"
		contentName: "source.embedded.ideal"
		patterns: [include: "#main"]
		beginCaptures:
			0: name: "meta.function.begin.ideal.section.macro.roff"
			1: name: "punctuation.definition.macro.roff"
			2: name: "entity.function.name.roff"
			3: patterns: [include: "text.roff#escapes"]
		endCaptures:
			0: name: "meta.function.end.ideal.section.macro.roff"
			1: name: "punctuation.definition.macro.roff"
			2: name: "entity.function.name.roff"


	# Top-level patterns
	main:
		patterns: [
			{include: "#comment"}
			{include: "#number"}
			{include: "#variables"}
			{include: "#box"}
			{include: "#function-call"}
			{include: "#keywords"}
			{include: "#operators"}
			{include: "#punctuation"}
		]
	
	
	# Box: fundamental building block of the IDEAL language
	box:
		begin: "(\\w+)[ \t]*(\\{)"
		end:   "\\}"
		beginCaptures:
			0: name: "meta.box.definition.ideal"
			1: name: "entity.function.box.name.ideal"
			2: name: "punctuation.definition.bracket.curly.ideal"
		endCaptures:
			0: name: "punctuation.definition.bracket.curly.ideal"
		patterns: [include: "$self"]


	# Comment blocks
	comment:
		name: "comment.block.ideal"
		begin: "/\\*"
		end:   "\\*/"


	# Invoking a function with bracketed arguments
	"function-call":
		name: "meta.function-call.ideal"
		begin: "(\\w+)(\\()"
		end:   "(?=\\))"
		beginCaptures:
			1: name: "entity.function.name.ideal"
			2: name: "punctuation.definition.bracket.round.ideal"
		patterns: [include: "$self"]


	# Textual keywords
	keywords:
		patterns: [
			name: "keyword.operator.$1.ideal"
			match: "\\b(conn|to|put)\\b"
		]
	
	
	# Numeric literals
	number:
		name: "constant.numeric.ideal"
		match: "\\d+(?:\\.\\d+)?"
	
	
	# Symbolic/mathematical operators
	operators:
		patterns: [
			{name: "keyword.operator.assignment.ideal", match: "="}
			{name: "keyword.operator.arithmetic.ideal", match: "[-+*/~]"}
		]


	punctuation:
		patterns: [
			{name: "punctuation.delimiter.object.comma.ideal",    match: ","}
			{name: "punctuation.terminator.statement.ideal",      match: ";"}
			{name: "punctuation.definition.bracket.round.ideal",  match: "\\)"}
			{name: "punctuation.definition.bracket.square.ideal", match: "\\]"}
			{name: "punctuation.definition.bracket.curly.ideal",  match: "\\}"}
			{
				# Round brackets
				begin: "\\("
				end:   "\\)"
				beginCaptures: 0: name: "punctuation.definition.bracket.round.ideal"
				endCaptures:   0: name: "punctuation.definition.bracket.round.ideal"
				patterns: [include: "$self"]
			},{
				
				# Square brackets
				begin: "\\["
				end:   "\\]"
				beginCaptures: 0: name: "punctuation.definition.bracket.square.ideal"
				endCaptures:   0: name: "punctuation.definition.bracket.square.ideal"
				patterns: [include: "$self"]
			},{
				
				# Curly brackets
				begin: "\\{"
				end:   "\\}"
				beginCaptures: 0: name: "punctuation.definition.bracket.curly.ideal"
				endCaptures:   0: name: "punctuation.definition.bracket.curly.ideal"
				patterns: [include: "$self"]
			}]


	# Local variables
	variables:
		begin: "\\b(var)\\b"
		end: "(?=;)"
		patterns: [include: "#punctuation"]
		beginCaptures:
			1: name: "storage.type.var.ideal"
